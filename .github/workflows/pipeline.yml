name: CI/CD Pipeline

on:
  push:
    branches:
      - master
      - main
  pull_request:
    branches:
      - master
      - main
    types: [closed]

env:
  PROJECT_NAME: ${{ github.event.repository.name }}
  PORT: 80

  GCP_REGION: asia-southeast2
  GCP_ZONE: asia-southeast2-a

  BRANCH: ${{ github.ref == 'refs/heads/staging' && 'staging' || 'production' }}

  AWS_REGION: us-east-1
  AWS_ROLE_ARN: arn:aws:iam::302546992452:user/glair-exploration-rey-intern
  EKS_CLUSTER_NAME: sandbox-intern

  CONFIG_BE_MODE: bc
  CONFIG_INFRA_MODE: shared
  BASE_URL: glair.id

jobs:
  setup-environment:
    if: github.event.pull_request.merged == false
    runs-on: ubuntu-latest
    outputs:
      IMAGE_TAG: ${{ steps.set-env.outputs.IMAGE_TAG }}
      IMAGE_NAME: ${{ steps.set-env.outputs.IMAGE_NAME }}
      SHORT_SHA: ${{ steps.set-env.outputs.SHORT_SHA }}
      BRANCH: ${{ env.BRANCH }}
    steps:
      - name: Set environment variables
        id: set-env
        run: |
          SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-7)
          IMAGE_NAME="reyshazni/${{ github.event.repository.name }}:$SHORT_SHA"
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "SHORT_SHA=$SHORT_SHA" >> $GITHUB_OUTPUT
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_OUTPUT

  dockerize-and-push:
    needs: setup-environment
    environment: ${{ needs.setup-environment.outputs.BRANCH }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repo
        uses: actions/checkout@v2

      - name: Login Docker
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker Image
        env: 
          IMAGE_NAME: ${{ needs.setup-environment.outputs.IMAGE_NAME }}
        run: |
          docker build -t $IMAGE_NAME .
          docker push $IMAGE_NAME
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_OUTPUT

  deploy-to-server-eks:
    needs: [setup-environment, dockerize-and-push]
    runs-on: ubuntu-latest
    environment: ${{ needs.setup-environment.outputs.BRANCH }}
    steps:
      - name: Checkout the repo
        uses: actions/checkout@v2

      - name: Prepare deployment file
        env: 
          IMAGE_NAME: ${{ needs.setup-environment.outputs.IMAGE_NAME }}
          SHORT_SHA: ${{ needs.setup-environment.outputs.SHORT_SHA }}
        run: |
          sed -i "s|<PROJECT_NAME>|${{ env.PROJECT_NAME }}|g" k8s/${{ env.BRANCH }}.yml
          sed -i "s|<IMAGE_NAME>|${{ env.IMAGE_NAME }}|g" k8s/${{ env.BRANCH }}.yml
          sed -i "s|<VERSION>|${{ env.SHORT_SHA }}|g" k8s/${{ env.BRANCH }}.yml
          sed -i "s|<PORT>|${{ env.PORT }}|g" k8s/${{ env.BRANCH }}.yml
          cat k8s/${{ env.BRANCH }}.yml

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup AWS CLI profile
        run: |
          mkdir -p ~/.aws
          echo "[default]" > ~/.aws/config
          echo "region = us-east-1" >> ~/.aws/config
          echo "output = json" >> ~/.aws/config
          echo "[profile gl-exploration]" >> ~/.aws/config
          echo "role_arn = ${{ env.AWS_ROLE_ARN }}" >> ~/.aws/config
          echo "source_profile = default" >> ~/.aws/config
          echo "skip_region_validation = true" >> ~/.aws/config
          echo "[default]" > ~/.aws/credentials
          echo "aws_access_key_id = ${{ secrets.AWS_ACCESS_KEY_ID }}" >> ~/.aws/credentials
          echo "aws_secret_access_key = ${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> ~/.aws/credentials
          echo "[gl-exploration]" >> ~/.aws/credentials
          echo "aws_access_key_id = ${{ secrets.AWS_ACCESS_KEY_ID }}" >> ~/.aws/credentials
          echo "aws_secret_access_key = ${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> ~/.aws/credentials

      - name: Connect and apply to EKS
        run: |
          cat ~/.aws/config
          aws eks update-kubeconfig --name ${{ env.EKS_CLUSTER_NAME }} --region ${{ env.AWS_REGION }}
          kubectl apply -f k8s/${{ env.BRANCH }}.yml
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ env.AWS_REGION }}
          AWS_PROFILE: gl-exploration